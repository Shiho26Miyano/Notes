app/
├── main.py                    # ← FastAPI (web framework)
├── core/
│   ├── dependencies.py        # ← FastAPI (dependency injection)
│   ├── config.py             # ← Regular Python (settings)
│   └── middleware.py         # ← FastAPI (middleware)
├── services/
│   ├── ai_service.py         # ← Regular Python async (business logic)
│   ├── stock_service.py      # ← Regular Python async (business logic)
│   ├── cache_service.py      # ← Regular Python async (business logic)
│   └── usage_service.py      # ← Regular Python async (business logic)
└── api/                      # ← FastAPI (if exists)
    └── v1/
        └── endpoints/        # ← FastAPI (route handlers)


🎯 Key Benefits of This Architecture
Separation of Concerns:
    Services: Business logic
    API: HTTP handling
    Core: Configuration
    Frontend: User interface
Scalability:
    Async: Handle many concurrent users
    Caching: Reduce API calls
    Versioning: Future-proof API
Maintainability:
    Modular: Easy to update individual parts
    Testable: Each layer can be tested separately
    Clear: Easy to understand and modify
